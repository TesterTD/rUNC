local totalTests = 0
local passedTests = 0
local skidCount = 0

local function info(msg)
	print(msg)
end

local function ok(msg)
	print("‚úÖ "..msg)
end

local function fail(msg)
	print("‚ùå "..msg)
end

local function warnEmoji(msg)
	print("‚ö†Ô∏è "..msg)
end

local function safe_pcall(f, ...)
	return pcall(function(...) return f(...) end, ...)
end

local function present(obj, name)
	if obj == nil then
		warnEmoji("–û–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: "..name)
		return false
	end
	if type(obj) ~= "function" and type(obj) ~= "table" and type(obj) ~= "drawing" then
		warnEmoji("–û–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π/—Ç–∞–±–ª–∏—Ü–µ–π: "..name.." (—Ç–∏–ø: "..type(obj)..")")
		return false
	end
	return true
end


local function check(cond, okmsg, failmsg, skidIfFail)
	totalTests = totalTests + 1
	if cond then
		ok(okmsg)
		passedTests = passedTests + 1
		return true
	else
		fail(failmsg)
		if skidIfFail then skidCount = skidCount + 1 end
		return false
	end
end

local function test_newcclosure()
	if not present(newcclosure, "newcclosure") or not present(iscclosure, "iscclosure") then return end


	do
		local normalFn = function(a,b) return a+b, a-b end
		local okc, ccFn = safe_pcall(newcclosure, normalFn)
		check(okc and type(ccFn)=="function", "newcclosure: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é", "newcclosure: –≤–µ—Ä–Ω—É–ª –Ω–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –æ—à–∏–±–∫–∞", true)
		if okc and type(ccFn)=="function" then
			local ok1,res1a,res1b = safe_pcall(ccFn, 5, 2)
			local ok2,res2a,res2b = safe_pcall(normalFn, 5, 2)
			check(ok1 and ok2 and res1a==res2a and res1b==res2b and res1a==7, "newcclosure: –Ω–µ –º–µ–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏–∫—É —Å –º—É–ª—å—Ç–∏-–≤–æ–∑–≤—Ä–∞—Ç–æ–º", "newcclosure: –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –º—É–ª—å—Ç–∏-–≤–æ–∑–≤—Ä–∞—Ç–æ–º", true)
			check(iscclosure(ccFn), "newcclosure: iscclosure –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true", "newcclosure: iscclosure –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false", true)
			check(not iscclosure(normalFn), "newcclosure: iscclosure –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", "newcclosure: iscclosure –≤–µ—Ä–Ω—É–ª true –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", true)
		end
	end

	do
		local yield_ok = false
		local yielded_value
		local yield_test = function()
			task.wait(0.01)
			yield_ok = true
			return "yielded"
		end
		local ok_y, wrapped_y = safe_pcall(newcclosure, yield_test)
		if check(ok_y and type(wrapped_y) == "function", "newcclosure: —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è yield-—Ñ—É–Ω–∫—Ü–∏–∏", "newcclosure: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è yield-—Ñ—É–Ω–∫—Ü–∏–∏", true) then
			local thread_success
			task.spawn(function()
				thread_success, yielded_value = safe_pcall(wrapped_y)
			end)
			task.wait(0.05)
			check(thread_success and yield_ok and yielded_value == "yielded", "newcclosure: –æ–±–µ—Ä—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è yieldable –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ", "newcclosure: –æ–±–µ—Ä—Ç–∫–∞ –Ω–µ yieldable –∏–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ", true)
		end
	end

	do
		local err_func = function() error("c_err_spoof_test") end
		local ok_e, wrapped_e = safe_pcall(newcclosure, err_func)
		if check(ok_e and type(wrapped_e) == "function", "newcclosure: —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è error-—Ñ—É–Ω–∫—Ü–∏–∏", "newcclosure: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è error-—Ñ—É–Ω–∫—Ü–∏–∏", true) then
			local success, msg = safe_pcall(wrapped_e)
			local is_c_error = type(tostring(msg)) == "string" and not tostring(msg):find(":", 1, true)
			check(not success and is_c_error, "newcclosure: –æ—à–∏–±–∫–∏ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ C-–æ—à–∏–±–∫–∏", "newcclosure: –æ—à–∏–±–∫–∏ –Ω–µ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ C-–æ—à–∏–±–∫–∏", true)
		end
	end

	do
		local outer_cclosure = newcclosure(function() return "outer" end) -- –¢–æ —á—É–≤—Å—Ç–≤–æ –∫–æ–≥–¥–∞ wrapper –Ω–µ–ª—å–∑—è —Å–ø—É—Ñ–Ω—É—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—á–∏–º —á–µ—Ä–µ–∑ —Ö—É–∫–∏ :(
		local ok_nest, nested = safe_pcall(newcclosure, outer_cclosure)
		if check(ok_nest and type(nested)=="function", "newcclosure: –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "newcclosure: –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–¥–∞–ª–æ –æ—à–∏–±–∫—É", true) then
			check(iscclosure(nested), "newcclosure: –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è cclosure", "newcclosure: –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ cclosure", true)
		end
	end

end

local function test_closure_checks()
	if not present(iscclosure, "iscclosure") or not present(islclosure, "islclosure") or not present(isexecutorclosure, "isexecutorclosure") then
		warnEmoji("–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ closure –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
		return
	end

	local lua_fn = function() return "lua" end
	local c_fn_new = newcclosure and newcclosure(lua_fn)
	local c_fn_standard = print
	local c_fn_executor = getgenv or getgc

	check(islclosure(lua_fn), "islclosure: true –¥–ª—è –æ–±—ã—á–Ω–æ–π Luau —Ñ—É–Ω–∫—Ü–∏–∏", "islclosure: false –¥–ª—è Luau —Ñ—É–Ω–∫—Ü–∏–∏", true)
	check(not islclosure(c_fn_standard), "islclosure: false –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π C-—Ñ—É–Ω–∫—Ü–∏–∏ (print)", "islclosure: true –¥–ª—è print", true)
	if c_fn_new then
		check(not islclosure(c_fn_new), "islclosure: false –¥–ª—è newcclosure", "islclosure: true –¥–ª—è newcclosure", true)
	end

	check(not iscclosure(lua_fn), "iscclosure: false –¥–ª—è –æ–±—ã—á–Ω–æ–π Luau —Ñ—É–Ω–∫—Ü–∏–∏", "iscclosure: true –¥–ª—è Luau —Ñ—É–Ω–∫—Ü–∏–∏", true)
	check(iscclosure(c_fn_standard), "iscclosure: true –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π C-—Ñ—É–Ω–∫—Ü–∏–∏ (print)", "iscclosure: false –¥–ª—è print", true)
	if c_fn_new then
		check(iscclosure(c_fn_new), "iscclosure: true –¥–ª—è newcclosure", "iscclosure: false –¥–ª—è newcclosure", true)
	end
	
	check(isexecutorclosure(lua_fn), "isexecutorclosure: true –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π Luau —Ñ—É–Ω–∫—Ü–∏–∏", "isexecutorclosure: false –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π Luau —Ñ—É–Ω–∫—Ü–∏–∏", true)
	check(not isexecutorclosure(c_fn_standard), "isexecutorclosure: false –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π C-—Ñ—É–Ω–∫—Ü–∏–∏ (print)", "isexecutorclosure: true –¥–ª—è print", true)
	if c_fn_executor then
		check(isexecutorclosure(c_fn_executor), "isexecutorclosure: true –¥–ª—è C-—Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–ª–æ–π—Ç–∞ ("..tostring(c_fn_executor)..")", "isexecutorclosure: false –¥–ª—è C-—Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–ª–æ–π—Ç–∞", true)
	end
	if c_fn_new then
		check(isexecutorclosure(c_fn_new), "isexecutorclosure: true –¥–ª—è newcclosure", "isexecutorclosure: false –¥–ª—è newcclosure", true)
	end
end

local function test_hookfunction()
	if not present(hookfunction, "hookfunction") then return end

	local function runCase(useCC) -- Velocity –∑–ª–∏—Ç—Å—è –Ω–∞ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—Éüò°üò°üò°üò°
		local tag = "HF_"..tostring(os.clock())
		local f = function(x)
			if x==nil then error("orig_err") end
			return x*2, tag
		end
		local old_f
		local hookBody = function(x)
			if old_f then
				local a,b = old_f(x)
				return a*1.5, "hooked"
			end
			return x*3, "hooked"
		end

		if useCC and newcclosure then hookBody = newcclosure(hookBody) end

		local okh, oldf_ret = safe_pcall(hookfunction, f, hookBody)
		if not check(okh and type(oldf_ret)=="function", "hookfunction: –≤–µ—Ä–Ω—É–ª –æ—Ä–∏–≥–∏–Ω–∞–ª "..(useCC and "(CC)" or "(no CC)"), "hookfunction: –æ—à–∏–±–∫–∞ "..(useCC and "(CC)" or "(no CC)"), true) then return end
		old_f = oldf_ret

		local ok1, r1, a1 = safe_pcall(f, 2)
		check(ok1 and r1==6 and a1=="hooked", "hookfunction: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ "..(useCC and "(CC)" or "(no CC)"), "hookfunction: –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤", true)

		local ok_err, _ = safe_pcall(f, nil)
		check(not ok_err, "hookfunction: –æ—à–∏–±–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ —Ö—É–∫–æ–º", "hookfunction: –æ—à–∏–±–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø—Ä–æ–ø–∞–≥–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ö—É–∫", true)

		local ok2, r2, a2 = safe_pcall(old_f, 2)
		check(ok2 and r2==4 and a2==tag, "hookfunction: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª", "hookfunction: –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª", true)
	end
	runCase(false)
	runCase(true)

	do
		local warned_message
		local hook_body = function(...)
			warned_message = table.concat({...}, " ")
		end

		local okh, old_warn = safe_pcall(hookfunction, warn, hook_body)
		if check(okh and type(old_warn) == "function", "hookfunction: –º–æ–∂–µ—Ç —Ö—É–∫–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –°-—Ñ—É–Ω–∫—Ü–∏–∏ (warn)", "hookfunction: –Ω–µ —Å–º–æ–≥ –∑–∞—Ö—É–∫–∞—Ç—å warn", true) then
			warn("test", "message")
			check(warned_message == "test message", "hookfunction: –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–∑–æ–≤–∞ warn —Ä–∞–±–æ—Ç–∞–µ—Ç", "hookfunction: –ø–µ—Ä–µ—Ö–≤–∞—Ç warn –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", true)

			local ok_restore = select(1, safe_pcall(hookfunction, warn, old_warn))
			if check(ok_restore, "hookfunction: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ warn –ø—Ä–æ—à–ª–æ –±–µ–∑ –æ—à–∏–±–æ–∫", "hookfunction: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ warn", true) then
				warned_message = nil
				warn("another message")
				check(warned_message == nil, "hookfunction: warn –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ö—É–∫ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "hookfunction: warn –Ω–µ –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", true)
			end
		end
	end

end

local function test_restorefunction()
	if not present(restorefunction, "restorefunction") or not present(hookfunction, "hookfunction") then return end -- restorefunction –±—Ä–∞—Ç

	local func_to_restore = function() return "original" end
	local another_func = function() return "untouched" end

	local ok_err, _ = safe_pcall(restorefunction, func_to_restore)
	check(not ok_err, "restorefunction: –æ–∂–∏–¥–∞–µ–º–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ –Ω–µ-—Ö—É–∫–Ω—É—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", "restorefunction: –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É", true)

	local okh, old = safe_pcall(hookfunction, func_to_restore, function() return "hooked_once" end)
	local okh2, old2 = safe_pcall(hookfunction, another_func, function() return "another_hooked" end)
	if okh and type(old) == "function" then
		safe_pcall(hookfunction, func_to_restore, function() return old() .. " and_twice" end)
	end

	local ok_restore, _ = safe_pcall(restorefunction, func_to_restore)
	if check(ok_restore, "restorefunction: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –Ω–∞ —Ö—É–∫–Ω—É—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", "restorefunction: –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É", true) then
		check(func_to_restore() == "original", "restorefunction: —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞", "restorefunction: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", true)
		check(another_func() == "another_hooked", "restorefunction: –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏", "restorefunction: –∑–∞—Ç—Ä–æ–Ω—É–ª –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏", true)

		local ok_err2, _ = safe_pcall(restorefunction, func_to_restore)
		check(not ok_err2, "restorefunction: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏", "restorefunction: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏", true)
	end

end

local function test_debug_upvalues()
    local d_gu, d_gus, d_su = debug.getupvalue, debug.getupvalues, debug.setupvalue
    if not present(d_gu, "debug.getupvalue") or not present(d_gus, "debug.getupvalues") or not present(d_su, "debug.setupvalue") then
        return
    end

    do
        local var1, var2, var3 = "hello", 123, { key = "val" }
        local func = function() return var1, var2, var3.key end

        local ok_gus, upvals = safe_pcall(d_gus, func)
        if check(ok_gus and type(upvals) == "table", "getupvalues: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getupvalues: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true) then
            check(#upvals == 3 and upvals[1] == var1 and upvals[2] == var2 and upvals[3] == var3, "getupvalues: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "getupvalues: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", true)
        end

        local ok_gu, upval1 = safe_pcall(d_gu, func, 1)
        check(ok_gu and upval1 == "hello", "getupvalue: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É", "getupvalue: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", true)

        local ok_su = select(1, safe_pcall(d_su, func, 2, 456))
        if check(ok_su, "setupvalue: –±–µ–∑ –æ—à–∏–±–æ–∫", "setupvalue: –æ—à–∏–±–∫–∞", true) then
            local _, r2 = func()
            check(r2 == 456 and var2 == 123, "setupvalue: –∏–∑–º–µ–Ω—è–µ—Ç upvalue –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏", "setupvalue: –Ω–µ –∏–∑–º–µ–Ω–∏–ª upvalue", true)
        end

        local ok_su2 = select(1, safe_pcall(d_su, func, 1, "world"))
        check(ok_su2, "setupvalue: —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ upvalue (string)", "setupvalue: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞", true)
        local r1_new = select(1, func())
        check(r1_new == "world", "setupvalue: —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ –æ—Ç—Ä–∞–∑–∏–ª–∞—Å—å –Ω–∞ –≤—ã–∑–æ–≤–µ", "setupvalue: —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞", true)
    end

    do
        local no_upval_func = function() return 1 end
        local ok_gus, upvals = safe_pcall(d_gus, no_upval_func)
        check(ok_gus and type(upvals) == "table" and #upvals == 0, "getupvalues: –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ upvalues", "getupvalues: –Ω–µ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞", true)
    end

    do
        local upval_func = function() local a = 1 end
        local ok_err_gu = not select(1, safe_pcall(d_gu, upval_func, 0))
        check(ok_err_gu, "getupvalue: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–µ 0", "getupvalue: –Ω–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–µ 0", true)
        local ok_err_gu2 = not select(1, safe_pcall(d_gu, upval_func, 2))
        check(ok_err_gu2, "getupvalue: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã", "getupvalue: –Ω–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã", true)
    end

    do
        local ok_err_gu_c = not select(1, safe_pcall(d_gu, print, 1))
        local ok_err_gus_c = not select(1, safe_pcall(d_gus, print))
        local ok_err_su_c = not select(1, safe_pcall(d_su, print, 1, nil))
        check(ok_err_gu_c, "getupvalue: –æ—à–∏–±–∫–∞ –Ω–∞ C closure", "getupvalue: –Ω–µ—Ç –æ—à–∏–±–∫–∏ –Ω–∞ C closure", true)
        check(ok_err_gus_c, "getupvalues: –æ—à–∏–±–∫–∞ –Ω–∞ C closure", "getupvalues: –Ω–µ—Ç –æ—à–∏–±–∫–∏ –Ω–∞ C closure", true)
        check(ok_err_su_c, "setupvalue: –æ—à–∏–±–∫–∞ –Ω–∞ C closure", "setupvalue: –Ω–µ—Ç –æ—à–∏–±–∫–∏ –Ω–∞ C closure", true)
    end
end

local function test_getrawmetatable()
	if not present(getrawmetatable, "getrawmetatable") then return end

	do
		local t = {}
		local mt = {__index = function() return "indexed" end}
		setmetatable(t, mt)
		local okc, rmt = safe_pcall(getrawmetatable, t)
		check(okc and rmt==mt, "getrawmetatable: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü—É", "getrawmetatable: –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—É—é –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü—É", true)
	end
	do
		local inst = Instance.new("Folder")
		local okc, imt = safe_pcall(getrawmetatable, inst)
		check(okc and type(imt)=="table" and imt.__index, "getrawmetatable: –¥–ª—è userdata (Instance) –≤–∞–ª–∏–¥–µ–Ω", "getrawmetatable: –¥–ª—è userdata –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", true)
		inst:Destroy()
	end
	do
		local okc, gmt = safe_pcall(getrawmetatable, game)
		check(okc and type(gmt)=="table", "getrawmetatable: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–∏—Å–∞—Ö (game)", "getrawmetatable: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ game", false)
	end
	do
		local t = {}
		local mt = { __metatable = "LOCKED" }
		setmetatable(t, mt)
		local okc, rmt = safe_pcall(getrawmetatable, t)
		check(okc and rmt == mt, "getrawmetatable: –æ–±—Ö–æ–¥–∏—Ç –∑–∞—â–∏—Ç—É __metatable", "getrawmetatable: –Ω–µ –æ–±—Ö–æ–¥–∏—Ç __metatable", true)
	end

end

local function test_setrawmetatable()
	if not present(setrawmetatable, "setrawmetatable") then return end

	local target_table = {}
	local protected_mt = { __metatable = "LOCKED" }
	setmetatable(target_table, protected_mt)

	local ok_vanilla, _ = safe_pcall(setmetatable, target_table, {})
	check(not ok_vanilla, "setrawmetatable: __metatable –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å", "setrawmetatable: __metatable –∑–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞", true)

	local new_mt = { __index = function(_, k) return "bypassed_"..k end }
	local ok_set, _ = safe_pcall(setrawmetatable, target_table, new_mt)

	if check(ok_set, "setrawmetatable: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ —Å –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ú–¢", "setrawmetatable: –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É", true) then
		check(getmetatable(target_table) == new_mt and target_table.xyz == "bypassed_xyz", "setrawmetatable: —É—Å–ø–µ—à–Ω–æ –æ–±–æ—à–µ–ª __metatable", "setrawmetatable: –Ω–µ —Å–º–æ–≥ –æ–±–æ–π—Ç–∏ __metatable", true)
	end

	local ok_set_nil = select(1, safe_pcall(setrawmetatable, target_table, nil))
	check(ok_set_nil and getmetatable(target_table) == nil, "setrawmetatable: –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å nil –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü—ã", "setrawmetatable: –Ω–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å nil", true)

end

local function test_readonly()
	if not present(setreadonly, "setreadonly") or not present(isreadonly, "isreadonly") then return end

	local t = { a = 1, nested = { b = 2 } }
	setreadonly(t, true)

	check(isreadonly(t), "isreadonly: true –ø–æ—Å–ª–µ setreadonly(true)", "isreadonly: false –ø–æ—Å–ª–µ setreadonly(true)", true)
	local ok_new_key = not select(1, safe_pcall(function() t.b = 2 end))
	check(ok_new_key, "setreadonly: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π", "setreadonly: –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", true)

	local ok_mod_key = not select(1, safe_pcall(function() t.a = 2 end))
	check(ok_mod_key, "setreadonly: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π", "setreadonly: –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ", true)

	local ok_rawset = not select(1, safe_pcall(rawset, t, "a", 3))
	check(ok_rawset and t.a == 1, "setreadonly: –±–ª–æ–∫–∏—Ä—É–µ—Ç rawset", "setreadonly: rawset –æ–±—Ö–æ–¥–∏—Ç –∑–∞—â–∏—Ç—É", true)

	local ok_set_false = select(1, safe_pcall(setreadonly, t, false))
	if check(ok_set_false, "setreadonly(false): –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "setreadonly(false): –æ—à–∏–±–∫–∞", true) then
		check(not isreadonly(t), "isreadonly: false –ø–æ—Å–ª–µ setreadonly(false)", "isreadonly: true –ø–æ—Å–ª–µ setreadonly(false)", true)
		t.a = 5
		check(t.a == 5, "setreadonly: —Ç–∞–±–ª–∏—Ü–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏", "setreadonly: —Ç–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞–ª–∞—Å—å readonly", true)
	end

end

local function test_hookmetamethod()
    if not present(hookmetamethod, "hookmetamethod") then return end

    do
        local inst = Instance.new("Folder")
        inst.Name = "OrigName"
        local old_newindex
        local ni_triggered = false
        local function newindex_body(self, k, v)
            if self == inst and k == "Name" and v == "HookedName" then
                ni_triggered = true
                return
            end
            return old_newindex(self, k, v)
        end
        local okh_ni, orig_ni = safe_pcall(hookmetamethod, game, "__newindex", newindex_body)
        if check(okh_ni and type(orig_ni) == "function", "hookmetamethod: __newindex —Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è game", "hookmetamethod: –æ—à–∏–±–∫–∞ —Ö—É–∫–∞ __newindex –¥–ª—è game", true) then
            old_newindex = orig_ni
            inst.Name = "HookedName"
            check(ni_triggered and inst.Name == "OrigName", "hookmetamethod: __newindex –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", "hookmetamethod: __newindex –ø–µ—Ä–µ—Ö–≤–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", true)
            local ok_restore = safe_pcall(hookmetamethod, game, "__newindex", old_newindex)
            check(ok_restore, "hookmetamethod: __newindex –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "hookmetamethod: __newindex –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", true)
        end
        inst:Destroy()
    end

    do
        local target = Instance.new("Folder")
        target.Name = "TostringTarget"
        local old_tostring
        local ts_triggered = false
        local function tostring_body(s)
            if s == target then
                ts_triggered = true
                return "hooked_tostring_object"
            end
            return old_tostring(s)
        end
        local okh_ts, orig_ts = safe_pcall(hookmetamethod, game, "__tostring", tostring_body)
        if check(okh_ts and type(orig_ts) == "function", "hookmetamethod: __tostring —Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "hookmetamethod: –æ—à–∏–±–∫–∞ __tostring", true) then
            old_tostring = orig_ts
            check(tostring(target) == "hooked_tostring_object" and ts_triggered, "hookmetamethod: __tostring –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", "hookmetamethod: __tostring –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", true)
            local ok_restore = safe_pcall(hookmetamethod, game, "__tostring", old_tostring)
            check(ok_restore, "hookmetamethod: __tostring –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "hookmetamethod: __tostring –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", true)
        end
        target:Destroy()
    end

    do
        local index_triggered = false
        local old_index
        local function index_hook(self, key)
            if self == game and key == "TestService" then
                index_triggered = true
                return "hooked_service"
            end
            return old_index(self, key)
        end
        local ok_hook, orig_index = safe_pcall(hookmetamethod, game, "__index", index_hook)
        if check(ok_hook and type(orig_index) == "function", "hookmetamethod: __index —Ö—É–∫ –Ω–∞ game", "hookmetamethod: __index –æ—à–∏–±–∫–∞ —Ö—É–∫–∞ –Ω–∞ game", true) then
            old_index = orig_index
            local val = game.TestService
            check(index_triggered and val == "hooked_service", "hookmetamethod: __index —Ö—É–∫ –Ω–∞ game —Å—Ä–∞–±–æ—Ç–∞–ª", "hookmetamethod: __index —Ö—É–∫ –Ω–∞ game –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", true)
            local ok_restore = safe_pcall(hookmetamethod, game, "__index", old_index)
            check(ok_restore, "hookmetamethod: __index –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "hookmetamethod: __index –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", true)
        end
    end

    do
        local nc_triggered = false
        local old_namecall
        local function namecall_hook(self, ...)
            if self == game and getnamecallmethod() == "GetService" then
                nc_triggered = true
                return "hooked_namecall_service"
            end
            return old_namecall(self, ...)
        end
        local ok_hook, orig_nc = safe_pcall(hookmetamethod, game, "__namecall", namecall_hook)
        if check(ok_hook and type(orig_nc) == "function", "hookmetamethod: __namecall —Ö—É–∫ –Ω–∞ game", "hookmetamethod: __namecall –æ—à–∏–±–∫–∞ —Ö—É–∫–∞ –Ω–∞ game", true) then
            old_namecall = orig_nc
            local val = game:GetService("TestService")
            check(nc_triggered and val == "hooked_namecall_service", "hookmetamethod: __namecall —Ö—É–∫ –Ω–∞ game —Å—Ä–∞–±–æ—Ç–∞–ª", "hookmetamethod: __namecall —Ö—É–∫ –Ω–∞ game –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", true)
            local ok_restore = safe_pcall(hookmetamethod, game, "__namecall", old_namecall)
            check(ok_restore, "hookmetamethod: __namecall –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "hookmetamethod: __namecall –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", true)
        end
    end
end

local function test_getgc()
	if not present(getgc, "getgc") then return end

	local marker = "GC_TEST_" .. tostring(os.clock())
	local sentinel_func = function() return marker end
	local sentinel_table = { marker = marker }
	task.wait(0.05)

	do
		local ok_gc, list_funcs = safe_pcall(getgc, false)
		if not check(ok_gc and type(list_funcs) == "table", "getgc(false): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getgc(false): –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true) then return end
		local func_found, table_found = false, false
		for _, v in ipairs(list_funcs) do
			if v == sentinel_func then func_found = true end
			if v == sentinel_table then table_found = true end
		end
		check(func_found, "getgc(false): –Ω–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏", "getgc(false): –Ω–µ –Ω–∞—à–µ–ª —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é", false)
		check(not table_found, "getgc(false): –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã", "getgc(false): –æ—à–∏–±–æ—á–Ω–æ –≤–∫–ª—é—á–∏–ª —Ç–∞–±–ª–∏—Ü—É", false)
	end

	do
		local ok_gc, list_all = safe_pcall(getgc, true)
		if not check(ok_gc and type(list_all) == "table", "getgc(true): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getgc(true): –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true) then return end
		local func_found, table_found, part_found = false, false, false
		local p = Instance.new("Part")
		task.wait()
		for _, v in ipairs(getgc(true)) do
			if v == sentinel_func then func_found = true end
			if v == sentinel_table then table_found = true end
			if v == p then part_found = true end
		end
		p:Destroy()
		check(func_found and table_found, "getgc(true): –Ω–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã", "getgc(true): –Ω–µ –Ω–∞—à–µ–ª —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã", false) -- Xeno getgc() –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–º–∞–Ω—É—Ç—å, –º–æ–ª–æ–¥–µ—Üü§¨ü§¨ü§¨
		check(part_found, "getgc(true): –Ω–∞—Ö–æ–¥–∏—Ç userdata (Instance)", "getgc(true): –Ω–µ –Ω–∞—à–µ–ª Instance", false)
	end

end

local function test_cloneref()
    if not present(cloneref, "cloneref") then return end

    local original = Instance.new("Part", workspace)
    local ok_clone, clone = safe_pcall(cloneref, original)

    if not check(ok_clone and typeof(clone) == "Instance", "cloneref: —Å–æ–∑–¥–∞–µ—Ç –∫–ª–æ–Ω —Ç–∏–ø–∞ Instance", "cloneref: –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∫–ª–æ–Ω", true) then
        original:Destroy()
        return
    end

    check(original ~= clone, "cloneref: –∫–ª–æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω (==) –æ—Ä–∏–≥–∏–Ω–∞–ª—É", "cloneref: –∫–ª–æ–Ω —Ä–∞–≤–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—É", true)

    local connectionsBefore = #getconnections(original:GetPropertyChangedSignal("Name"))
    clone:GetPropertyChangedSignal("Name"):Connect(function() end)
    local hasGetConnections = select(1, pcall(getconnections, original:GetPropertyChangedSignal("Name")))
    if hasGetConnections then
        check(#getconnections(original:GetPropertyChangedSignal("Name")) > connectionsBefore, "cloneref: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–æ–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª", "cloneref: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã", true)
    end

    original:Destroy()
    task.wait()

    local inTreeOriginal = original:IsDescendantOf(game)
    local inTreeClone = clone:IsDescendantOf(game)
    check(not inTreeOriginal and not inTreeClone, "cloneref: –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –¥–µ—Ä–µ–≤–∞", "cloneref: –æ–¥–∏–Ω –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Å—Ç–∞–ª—Å—è –≤ –¥–µ—Ä–µ–≤–µ", true)

    local ok_method_clone = pcall(function() return clone:GetFullName() end)
    local ok_parent_access = pcall(function() return clone.Parent end)
    check(not ok_method_clone or clone.Parent == nil, "cloneref: –∫–ª–æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∏–ª–∏ –±–µ–∑—Ä–æ–¥–Ω—ã–º –ø–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞", "cloneref: –∫–ª–æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º", true)
end

local function test_firetouchinterest()
    if not present(firetouchinterest, "firetouchinterest") then -- –∑–∞–ª—É–ø–∞
        return
    end

    local function make_part(pos)
        local p = Instance.new("Part")
        p.Size = Vector3.new(2, 2, 2)
        p.CFrame = pos
        p.Anchored = true
        p.Parent = workspace
        return p
    end

    local part1 = make_part(CFrame.new(0, 20, 0))
    local part2 = make_part(CFrame.new(0, 20.1, 0))

    local touch_started, touch_ended = 0, 0
    local c1 = part1.Touched:Connect(function() touch_started += 1 end)
    local c2 = part1.TouchEnded:Connect(function() touch_ended += 1 end)

    part1.CanTouch = false
    task.wait(0.1)
    safe_pcall(firetouchinterest, part1, part2, 0)
    task.wait(0.1)
    check(touch_started == 0,
        "firetouchinterest: —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ CanTouch=false",
        "firetouchinterest: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç CanTouch=false", true)

    part1.CanTouch = true
    safe_pcall(firetouchinterest, part1, part2, 0)
    task.wait(0.1)
    check(touch_started == 1,
        "firetouchinterest: –≤—ã–∑—ã–≤–∞–µ—Ç Touched –ø—Ä–∏ toggle=0",
        "firetouchinterest: –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç Touched –ø—Ä–∏ toggle=0", true)

    safe_pcall(firetouchinterest, part1, part2, 1)
    task.wait(0.1)
    check(touch_ended == 1,
        "firetouchinterest: –≤—ã–∑—ã–≤–∞–µ—Ç TouchEnded –ø—Ä–∏ toggle=1",
        "firetouchinterest: –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç TouchEnded –ø—Ä–∏ toggle=1", true)

    safe_pcall(firetouchinterest, part1, part2, true)
    task.wait(0.1)
    check(touch_started == 2,
        "firetouchinterest: –≤—ã–∑—ã–≤–∞–µ—Ç Touched –ø—Ä–∏ toggle=true",
        "firetouchinterest: –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç Touched –ø—Ä–∏ toggle=true", true)

    safe_pcall(firetouchinterest, part1, part2, false)
    task.wait(0.1)
    check(touch_ended == 2,
        "firetouchinterest: –≤—ã–∑—ã–≤–∞–µ—Ç TouchEnded –ø—Ä–∏ toggle=false",
        "firetouchinterest: –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç TouchEnded –ø—Ä–∏ toggle=false", true)

    local ok_err_nil = not select(1, safe_pcall(firetouchinterest, part1, nil, 0))
    check(ok_err_nil,
        "firetouchinterest: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ part2=nil",
        "firetouchinterest: –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ part2=nil", true)

    local ok_err_type = not select(1, safe_pcall(firetouchinterest, {}, part2, 0))
    check(ok_err_type,
        "firetouchinterest: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ part1",
        "firetouchinterest: –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ part1", true)

    c1:Disconnect()
    c2:Disconnect()
    part1:Destroy()
    part2:Destroy()
end


local function test_checkcaller()
    if not present(checkcaller, "checkcaller") then return end

    local ok_p, v_p = safe_pcall(checkcaller)
    check(ok_p and v_p, "checkcaller: true –≤ pcall", "checkcaller: –Ω–µ true –≤ pcall/–æ—à–∏–±–∫–∞", true)

    local ok_args = safe_pcall(function() return checkcaller("arg") end)
    check(ok_args, "checkcaller: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã", "checkcaller: –∫—Ä–∞—à–∏—Ç –ø—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö", true)

    local gm = game
    pcall(function() if cloneref then gm = cloneref(game) end end)

    local hook_result
    local old_nc
    local in_call = false

    local function wrapper(self, ...) -- –ü–æ—á—Ç–∏ –ª—é–±—ã–µ —Å–ø—É—Ñ—ã –¥–ª—è checkcaller() –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –º–µ—Ç–æ–¥—É –±—É–¥—É—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫—Ä–∞—à–Ω—É—Ç RobloxPlayer :D
        if in_call then
            return old_nc and old_nc(self, ...)
        end
        in_call = true
        local m = getnamecallmethod()
        if m == "IsA" then
            hook_result = checkcaller()
        end
        local ok, res = pcall(old_nc, self, ...)
        in_call = false
        if ok then
            return res
        end
    end

    local ok_hook = false
    pcall(function()
        if newcclosure then
            old_nc = hookmetamethod(gm, "__namecall", newcclosure(wrapper))
        else
            old_nc = hookmetamethod(gm, "__namecall", wrapper)
        end
        ok_hook = type(old_nc) == "function"
    end)

    check(ok_hook, "hookmetamethod: –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω", "hookmetamethod: –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ä–∏–≥–∏–Ω–∞–ª __namecall", true)
    if not ok_hook then return end

    pcall(function() gm:IsA("Workspace") end)
    task.wait()
    check(hook_result == false, "checkcaller: false –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ C-–∫–æ–¥–∞", "checkcaller: true –¥–ª—è C-–∫–æ–¥–∞", true)

    if newcclosure then
        local cc_false_fn = newcclosure(function()
            return checkcaller()
        end)
        local ok_cc, v_cc = safe_pcall(cc_false_fn)
        check(ok_cc and not v_cc, "checkcaller: false –∏–∑ newcclosure", "checkcaller: true –∏–∑ newcclosure", true)

        local function normal_fn()
            return cc_false_fn()
        end
        local ok_n, v_n = safe_pcall(normal_fn)
        check(ok_n and v_n, "checkcaller: true –ø—Ä–∏ –≤—ã–∑–æ–≤–µ C-closure –∏–∑ Luau", "checkcaller: false –ø—Ä–∏ –≤—ã–∑–æ–≤–µ C-closure –∏–∑ Luau", true)
    end

    local stable = true
    for i = 1, 5 do
        local ok_s, v_s = safe_pcall(checkcaller)
        if not (ok_s and v_s) then
            stable = false
            break
        end
        task.wait()
    end
    check(stable, "checkcaller: —Å—Ç–∞–±–∏–ª–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö", "checkcaller: –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö", true)
end


local function test_getconnections()
	if not present(getconnections, "getconnections") then return end
	local be = Instance.new("BindableEvent") -- –û–≥–æ, Bindable
	local triggered = false
	local function handler() triggered = true; return "fired" end
	local c = be.Event:Connect(handler)

	local okc, conns = safe_pcall(getconnections, be.Event)
	check(okc and type(conns) == "table" and #conns >= 1, "getconnections: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", "getconnections: –≤–µ—Ä–Ω—É–ª –Ω–µ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –ø—É—Å—Ç–æ", true)

	if okc and #conns > 0 then
		local conn_obj = conns[#conns] 
		if check(typeof(conn_obj) == "RBXScriptConnection" and conn_obj.Connected, "getconnections: —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ - –≤–∞–ª–∏–¥–Ω—ã–µ Connection", "getconnections: —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º–∏ Connection", true) then
			if conn_obj.Function then
				check(conn_obj.Function == handler, "getconnections: Connection.Function —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é", "getconnections: Connection.Function –Ω–µ–≤–µ—Ä–Ω–∞", true)
				local fire_ok, fire_ret = safe_pcall(conn_obj.Fire, conn_obj)
				check(fire_ok and triggered and fire_ret == "fired", "getconnections: connection:Fire() —Ä–∞–±–æ—Ç–∞–µ—Ç", "getconnections: connection:Fire() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", true)

				triggered = false
				local func_ret = conn_obj.Function()
				check(triggered and func_ret == "fired", "getconnections: connection.Function() —Ä–∞–±–æ—Ç–∞–µ—Ç", "getconnections: connection.Function() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", true)
			end
		end
	end
	c:Disconnect(); be:Destroy()

	if game:GetService("Players").LocalPlayer then
		local c_conn_ok, idled_conns = safe_pcall(getconnections, game.Players.LocalPlayer.Idled)
		if check(c_conn_ok and #idled_conns > 0, "getconnections: –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å C-connections (Idled)", "getconnections: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å C-connections", false) then
			local c_conn = idled_conns[1]
			check(c_conn.Function == nil, "getconnections: Function —Ä–∞–≤–Ω–æ nil –¥–ª—è C-connection", "getconnections: Function –Ω–µ nil –¥–ª—è C-connection", true)
		end
	end
end

local function pick_request_func()
	if http_request then return http_request, "http_request" end
	if request then return request, "request" end
	if syn and syn.request then return syn.request, "syn.request" end
	if http and http.request then return http.request, "http.request" end
	return nil, nil
end

local function test_request()
	local req, name = pick_request_func()
	if not present(req, "request/http_request") then return end

	local post_ok, res_post = safe_pcall(req, {Url="https://httpbin.org/post", Method="POST", Body="test", Headers={["Content-Type"]="text/plain"}})
	check(post_ok and type(res_post)=="table" and res_post.Success and res_post.Body:find("test"), name..": —É—Å–ø–µ—à–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å", name..": –æ—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞", false)

	local get_ok, res_get = safe_pcall(req, { Url = "https://httpbin.org/get", Method = "GET" })
	if check(get_ok and res_get and res_get.Success and res_get.StatusCode == 200, name..": —É—Å–ø–µ—à–Ω—ã–π GET –∑–∞–ø—Ä–æ—Å", name..": –æ—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞", false) then
		local p, decoded = safe_pcall(game:GetService("HttpService").JSONDecode, game:GetService("HttpService"), res_get.Body)
		if check(p and type(decoded) == "table" and type(decoded.headers) == "table", name..": —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ GET - –≤–∞–ª–∏–¥–Ω—ã–π JSON", name..": —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ GET - –Ω–µ JSON", false) then
			local has_ua = decoded.headers["User-Agent"] and decoded.headers["User-Agent"] ~= ""
			local has_fp = false
			for k in pairs(decoded.headers) do
				if k:lower():find("fingerprint") then has_fp = true; break end
			end
			check(has_ua, name..": –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ User-Agent", name..": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç User-Agent", false)
			check(has_fp, name..": –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Fingerprint", name..": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Fingerprint", false)
		end
	end

	local ok_err, _ = safe_pcall(req, {Url="invalid-url", Method="GET"})
	check(not select(1, safe_pcall(req, {Url = "https://invalid.421414aofas. nonexiggstent/", Method = "GET"})), name..": –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º URL", name..": –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ URL", false)
end

local function test_getnilinstances()
    if not present(getnilinstances, "getnilinstances") then return end

    local ok_before, list_before = safe_pcall(getnilinstances)
    check(ok_before and type(list_before) == "table", "getnilinstances: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getnilinstances: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É/–æ—à–∏–±–∫–∞", true)

    local nil_part = Instance.new("Part")
    nil_part.Name = "GNI_Test_" .. tostring(math.random(1e9))
    local parented_part = Instance.new("Part")
    parented_part.Name = "GNI_Parented_" .. tostring(math.random(1e9))
    parented_part.Parent = workspace

    task.wait(0.1)

    local ok_list, list_mid = safe_pcall(getnilinstances)
    check(ok_list and type(list_mid) == "table", "getnilinstances: –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω", "getnilinstances: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", true)

    local found_nil, found_parented = false, false
    for _, inst in ipairs(list_mid) do
        if inst == nil_part then
            found_nil = true
        elseif inst == parented_part then
            found_parented = true
        end
        if found_nil and found_parented then break end
    end

    check(found_nil, "getnilinstances: –Ω–∞—Ö–æ–¥–∏—Ç nil-parent —ç–∫–∑–µ–º–ø–ª—è—Ä—ã", "getnilinstances: –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç nil-parent —ç–∫–∑–µ–º–ø–ª—è—Ä—ã", true)
    check(not found_parented, "getnilinstances: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º", "getnilinstances: –≤–∫–ª—é—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º", true)

    nil_part:Destroy()
    parented_part:Destroy()
end


local function test_threadidentity()
	local gti, sti = getthreadidentity or getidentity, setthreadidentity or setidentity
	if not present(gti, "getthreadidentity") or not present(sti, "setthreadidentity") then return end

	local original_identity = gti()
	check(type(original_identity) == "number", "getthreadidentity: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ", "getthreadidentity: –Ω–µ –≤–µ—Ä–Ω—É–ª —á–∏—Å–ª–æ", true)
	local new_id = -1
	local th = task.spawn(function() sti(5); new_id=gti() end)
	task.wait()
	check(new_id == 5, "setthreadidentity: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ (task.spawn)", "setthreadidentity: –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ", true)
	check(gti() == original_identity, "setthreadidentity: –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ –ø–æ—Ç–æ–∫–∏", "setthreadidentity: –ø–æ–≤–ª–∏—è–ª –Ω–∞ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫", true)

	sti(original_identity)

end

local function test_debug_info()
    local getinfo = debug and debug.getinfo
    if not present or not present(getinfo, "debug.getinfo") then return end

    local line_defined
    local upval = "upvalue"
    local function target_func(arg)
        local l_var = arg
        local info = getinfo(1, "l")
        if info and type(info.currentline) == "number" then
            line_defined = info.currentline - 3
        end
        return upval .. l_var
    end

    local ok_info, info_by_ref = safe_pcall(getinfo, target_func, "Slnu")
    if check(ok_info and type(info_by_ref) == "table", "debug.getinfo(func): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "debug.getinfo(func): –≤–µ—Ä–Ω—É–ª –Ω–µ —Ç–∞–±–ª–∏—Ü—É", true) then
        check(info_by_ref.what == "Lua" and type(info_by_ref.source) == "string", "debug.getinfo(func, S): 'what' –∏ 'source' –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", "debug.getinfo(func, S): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 'what' –∏–ª–∏ 'source'", true)
        check(info_by_ref.linedefined == line_defined and type(info_by_ref.lastlinedefined) == "number", "debug.getinfo(func, l): 'linedefined' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "debug.getinfo(func, l): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 'linedefined'", true)
        check(info_by_ref.nups == 1, "debug.getinfo(func, u): 'nups' (–∫–æ–ª-–≤–æ upvalue) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "debug.getinfo(func, u): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 'nups'", true)
        if info_by_ref.name then
            check(info_by_ref.name == "target_func", "debug.getinfo(func, n): 'name' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "debug.getinfo(func, n): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 'name'", true)
        end
    end

    local level1_info, level2_func
    local function wrapper()
        level1_info = getinfo(1, "l")
        local level2_info = getinfo(2, "f")
        if type(level2_info) == "table" then
            level2_func = level2_info.func
        end
    end
    wrapper()
    check(type(level1_info) == "table" and type(level1_info.currentline) == "number", "debug.getinfo(level, l): –ø–æ–ª—É—á–∞–µ—Ç 'currentline'", "debug.getinfo(level, l): –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç 'currentline'", true)
    check(level2_func == test_debug_info, "debug.getinfo(level, f): –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é-–≤—ã–∑—ã–≤–∞—Ç–µ–ª—è", "debug.getinfo(level, f): –ø–æ–ª—É—á–∏–ª –Ω–µ–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é", true)

    local ok_err_c = not select(1, safe_pcall(function() return getinfo(print, "s") end))
    check(ok_err_c, "debug.getinfo: –æ–∂–∏–¥–∞–µ–º–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "debug.getinfo: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
end

local function test_getscripts()
    if not present(getscripts, "getscripts") then return end

    local dummy_script = Instance.new("LocalScript")
    dummy_script.Name = "GetScriptsDummy_" .. math.random()
    dummy_script.Parent = workspace

    local ok_get, scripts = safe_pcall(getscripts)
    check(ok_get and type(scripts) == "table", "getscripts: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getscripts: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true)

    local found = false
    if ok_get then
        for _, s in ipairs(scripts) do
            if s == dummy_script then
                found = true
                break
            end
        end
    end
    check(found, "getscripts: –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω—ã–π LocalScript", "getscripts: –Ω–µ –Ω–∞—à–µ–ª –Ω–æ–≤—ã–π LocalScript", false)

    dummy_script:Destroy()
    task.wait()
end

local function test_clonefunction()
	if not present(clonefunction, "clonefunction") then return end

	local upval = { n = 10 }
	local original = function() upval.n = upval.n + 1; return "original" end
	local ok_clone, cloned = safe_pcall(clonefunction, original)

	if check(ok_clone and type(cloned) == "function", "clonefunction: —Å–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é", "clonefunction: –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ—É–Ω–∫—Ü–∏—é", true) then
		check(original ~= cloned, "clonefunction: –∫–ª–æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–π –∂–µ —Å–∞–º–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π", "clonefunction: –∫–ª–æ–Ω –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–¥–µ–Ω—Ç–∏—á–Ω—ã", true)
		if getfenv then
			check(getfenv(original) == getfenv(cloned), "clonefunction: –∫–ª–æ–Ω –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–º–µ—é—Ç –æ–¥–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (env)", "clonefunction: –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ", true)
		end
		
		local okh, old_original = pcall(hookfunction, original, function() return "hooked" end)
		if okh then
			local original_res = original()
			local cloned_res = cloned()
			check(original_res == "hooked" and cloned_res == "original", "clonefunction: —Ö—É–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–ª–æ–Ω", "clonefunction: —Ö—É–∫ –ø–æ–≤–ª–∏—è–ª –Ω–∞ –∫–ª–æ–Ω", true)
		end
	end

	local ok_err, _ = safe_pcall(clonefunction, print)
	check(not ok_err, "clonefunction: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –°-—Ñ—É–Ω–∫—Ü–∏–∏", "clonefunction: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –¥–ª—è C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
end

local function test_debug_protos()
	local getproto = debug.getproto
	if not present(getproto, "debug.getproto") then return end

	local activated_proto_ref
	local function container()
		local function proto1() return "p1" end
		activated_proto_ref = proto1
		local function proto2() return "p2" end
		return proto1, proto2
	end

	local ok_inactive, inactive_p1 = safe_pcall(getproto, container, 1, false)
	if check(ok_inactive and type(inactive_p1) == "function", "debug.getproto: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø", "debug.getproto: –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø", true) then
		local uncallable_ok, _ = safe_pcall(inactive_p1)
		check(not uncallable_ok, "debug.getproto: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω", "debug.getproto: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –±—ã–ª –≤—ã–∑–≤–∞–Ω", true)
	end
	
	container()
	local ok_active, active_protos_table = safe_pcall(getproto, container, 1, true)
	local active_proto = active_protos_table and active_protos_table[1]
	if check(ok_active and type(active_protos_table) == "table" and #active_protos_table > 0 and type(active_proto) == "function", "debug.getproto(true): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤", "debug.getproto(true): –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤", true) then
		check(active_proto == activated_proto_ref, "debug.getproto(true): –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", "debug.getproto(true): –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç", true)
		local can_call_ok, call_res = safe_pcall(active_proto)
		check(can_call_ok and call_res == "p1", "debug.getproto(true): –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω", "debug.getproto(true): –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø", true)
	end
end


local function test_getreg()
	if not present(getreg, "getreg") then return end

	local ok_reg, reg = safe_pcall(getreg)
	check(ok_reg and type(reg) == "table", "getreg: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getreg: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true)

	local thread_closed = false
	local loop_thread = task.spawn(function()
		while true do task.wait(1) end
	end)
	task.wait(0.05)

	local thread_found = false
	for _, value in pairs(getreg()) do
		if value == loop_thread then
			thread_found = true
			local close_ok, _ = safe_pcall(coroutine.close, loop_thread)
			if close_ok then
				task.wait(0.05)
				thread_closed = coroutine.status(loop_thread) == "dead"
			end
			break
		end
	end
	check(thread_found, "getreg: –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ", "getreg: –Ω–µ –Ω–∞—à–µ–ª –ø–æ—Ç–æ–∫", false)
	check(thread_closed, "getreg: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ coroutine.close", "getreg: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫", false)

end

local function test_debug_constants()
	if not present(debug.getconstants, "debug.getconstants") or not present(debug.getconstant, "debug.getconstant") then return end


	local const_str = "hello_const"
	local const_num = 123.456
	local function func_with_consts()
		return const_str, const_num, true
	end

	local ok_consts, consts_table = safe_pcall(debug.getconstants, func_with_consts)
	if check(ok_consts and type(consts_table) == "table", "getconstants: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getconstants: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true) then
		local str_found, num_found, bool_found = false, false, false
		for _, v in ipairs(consts_table) do
			if v == const_str then str_found = true end
			if v == const_num then num_found = true end
			if v == true then bool_found = true end
		end
		check(str_found and num_found and bool_found, "getconstants: —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã", "getconstants: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç", true)
	end

	local ok_c, val = safe_pcall(debug.getconstant, func_with_consts, 1)
	check(ok_c, "getconstant: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞", "getconstant: –æ—à–∏–±–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–º –∏–Ω–¥–µ–∫—Å–µ", true)

	local ok_c_nil, val_nil = safe_pcall(debug.getconstant, func_with_consts, 999)
	check(ok_c_nil and val_nil == nil, "getconstant: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", "getconstant: –Ω–µ –≤–µ—Ä–Ω—É–ª nil", true)

	local ok_err_c_plural = not select(1, safe_pcall(debug.getconstants, print))
	local ok_err_c_singular = not select(1, safe_pcall(debug.getconstant, print, 1))
	check(ok_err_c_plural, "getconstants: –æ—à–∏–±–∫–∞ –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "getconstants: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É", true)
	check(ok_err_c_singular, "getconstant: –æ—à–∏–±–∫–∞ –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "getconstant: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É", true)

end

local function test_getgenv()
	if not present(getgenv, "getgenv") then return end

	local ok_get, env = safe_pcall(getgenv)
	if not check(ok_get and type(env) == "table", "getgenv: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getgenv: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true) then return end

	local sentinel = "TEST_VAL_"..os.clock()
	env.test_getgenv_persistence = sentinel
	check(getgenv().test_getgenv_persistence == sentinel, "getgenv: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã", "getgenv: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è", false)

	if getfenv then
		getfenv().test_var_fenv = "F"
		env.test_var_genv = "G"
		check(env.test_var_fenv == nil, "getgenv: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç getfenv (1)", "getgenv: –Ω–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç getfenv (1)", false)
		check(getfenv().test_var_genv == nil, "getgenv: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç getfenv (2)", "getgenv: –Ω–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç getfenv (2)", false) -- –û–π –¥–∞ –∫–æ–º—É –æ–Ω–æ –Ω–∞—Ö–µ—Ä –Ω–∞–¥–æ –Ω–∞ getfenv(2) –±—ã—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
	end
end

local function test_getcallbackvalue()
	if not present(getcallbackvalue, "getcallbackvalue") then return end

	local bf = Instance.new("BindableFunction")
	local rf = Instance.new("RemoteFunction")

	local sentinel = false
	local callback_func = function() sentinel = true end
	bf.OnInvoke = callback_func

	local ok_get, retrieved = safe_pcall(getcallbackvalue, bf) 
	if ok_get and retrieved == nil then 
		ok_get, retrieved = safe_pcall(getcallbackvalue, bf, "OnInvoke")
	end
	
	if check(ok_get and retrieved == callback_func, "getcallbackvalue: –∏–∑–≤–ª–µ–∫–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π callback", "getcallbackvalue: –Ω–µ –∏–∑–≤–ª–µ–∫ callback", true) then
		retrieved()
		check(sentinel, "getcallbackvalue: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π callback —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—á–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π", "getcallbackvalue: callback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", true)
	end

	local ok_nil, val_nil = safe_pcall(getcallbackvalue, rf, "OnClientInvoke")
	check(ok_nil and val_nil == nil, "getcallbackvalue: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –¥–ª—è –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞", "getcallbackvalue: –Ω–µ –≤–µ—Ä–Ω—É–ª nil", true)

	local ok_non, val_non = safe_pcall(getcallbackvalue, bf, "NonExistentProperty")
	check(ok_non and val_non == nil, "getcallbackvalue: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞", "getcallbackvalue: –Ω–µ –≤–µ—Ä–Ω—É–ª nil –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞", true)

	bf:Destroy(); rf:Destroy()

end

local function test_getcustomasset()
    if not present(getcustomasset, "getcustomasset") then return end

    local path = "gcatest.txt"
    if isfile and isfile(path) and delfile then
        delfile(path)
    end

    if writefile then
        writefile(path, "test")
        local ok_get, assetId = safe_pcall(getcustomasset, path)
        if check(ok_get and type(assetId) == "string", "getcustomasset: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞", "getcustomasset: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", false) then -- –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ rbxasset:// –±—ã–ª–∞...
            local valid_prefixes = {
                "^rbxasset://",
                "^rbxassetid://",
                "^rbxthumb://",
                "^rbxgameasset://"
            }
            local valid = false
            for _, pattern in ipairs(valid_prefixes) do
                if assetId:lower():find(pattern, 1) then
                    valid = true
                    break
                end
            end
            check(valid, "getcustomasset: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π asset id", "getcustomasset: –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π id", false)
        end
        if delfile then
            delfile(path)
        end
    else
        warnEmoji("getcustomasset: writefile –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    end
end


local function test_loadstring()
	if not present(loadstring, "loadstring") then return end -- –±–∞—Ç—É—Ç

	local sentinel_name = "loadstring_test_global_"..math.random(1e5, 1e6)
	local code_valid = "getgenv()['"..sentinel_name.."'] = 123; return 456" 
	local code_invalid = "local a ="

	local ok_load, func = safe_pcall(loadstring, code_valid)
	if check(ok_load and type(func) == "function", "loadstring: –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é", "loadstring: –Ω–µ —Å–º–æ–≥ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥", true) then
		local ok_run, result = safe_pcall(func)
		check(ok_run and result == 456, "loadstring: —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "loadstring: —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ", true)
		if getgenv then
			check(getgenv()[sentinel_name] == 123, "loadstring: —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", "loadstring: —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", false)
		end
	end

	local ok_load_err, f_nil, err_msg = safe_pcall(loadstring, code_invalid, "TestChunk")
	check(ok_load_err and f_nil == nil and type(err_msg) == "string", "loadstring: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞", "loadstring: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥", true)
	if type(err_msg) == "string" then
		check(err_msg:find("TestChunk", 1, true), "loadstring: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è —á–∞–Ω–∫–∞", "loadstring: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —á–∞–Ω–∫–∞", true)
	end
end

local function test_getrunningscripts()
	if not present(getrunningscripts, "getrunningscripts") then return end

	local running_script = script
	local inactive_script = Instance.new("LocalScript")

	local ok_get, list = safe_pcall(getrunningscripts)
	if not check(ok_get and type(list) == "table", "getrunningscripts: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getrunningscripts: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", false) then return end

	local found_self, found_inactive = false, false
	for _, s in ipairs(list) do
		if s == running_script then found_self = true end
		if s == inactive_script then found_inactive = true end
	end
	check(found_self, "getrunningscripts: –Ω–∞—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Å–∫—Ä–∏–ø—Ç", "getrunningscripts: –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç", false)
	check(not found_inactive, "getrunningscripts: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã", "getrunningscripts: –æ—à–∏–±–æ—á–Ω–æ –≤–∫–ª—é—á–∏–ª –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç", false)
	inactive_script:Destroy()

end

local function test_getscriptbytecode()
	if not present(getscriptbytecode, "getscriptbytecode") then return end


	local dummy_with_code = Instance.new("LocalScript")
	dummy_with_code.Source = "print('hello')"
	local dummy_empty = Instance.new("LocalScript")

	local ok_get, bytecode = safe_pcall(getscriptbytecode, dummy_with_code)
	check(ok_get and type(bytecode) == "string" and #bytecode > 0, "getscriptbytecode: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –±–∞–π—Ç-–∫–æ–¥–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ —Å –∫–æ–¥–æ–º", "getscriptbytecode: –Ω–µ –≤–µ—Ä–Ω—É–ª –±–∞–π—Ç-–∫–æ–¥", false)

	local ok_nil, bc_nil = safe_pcall(getscriptbytecode, dummy_empty)
	check(ok_nil and bc_nil == nil, "getscriptbytecode: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ –±–∞–π—Ç-–∫–æ–¥–∞", "getscriptbytecode: –Ω–µ –≤–µ—Ä–Ω—É–ª nil –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞", false)

	dummy_with_code:Destroy(); dummy_empty:Destroy()
end

local function test_firesignal()
	if not present(firesignal, "firesignal") then return end
	local be = Instance.new("BindableEvent")
	local fire_count = 0
	local last_arg


	local c = be.Event:Connect(function(arg)
		fire_count = fire_count + 1
		last_arg = arg
	end)

	firesignal(be.Event, "arg1")
	check(fire_count == 1 and last_arg == "arg1", "firesignal: –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º", "firesignal: –Ω–µ –≤—ã–∑–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", true)

	firesignal(be.Event)
	check(fire_count == 2 and last_arg == nil, "firesignal: –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", "firesignal: –Ω–µ –≤—ã–∑–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", true)

	c:Disconnect()
	firesignal(be.Event)
	check(fire_count == 2, "firesignal: –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "firesignal: –≤—ã–∑–≤–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", true)

	be:Destroy()
end

local function test_compareinstances()
	if not present(compareinstances, "compareinstances") or not present(cloneref, "cloneref") then return end


	local inst1 = Instance.new("Part")
	local ref_inst1 = cloneref(inst1)

	check(compareinstances(inst1, inst1), "compareinstances: true –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞", "compareinstances: false –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞", true)
	check(compareinstances(inst1, ref_inst1), "compareinstances: true –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ cloneref", "compareinstances: false –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ cloneref", true)

	local inst2 = Instance.new("Part")
	check(not compareinstances(inst1, inst2), "compareinstances: false –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", "compareinstances: true –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", true)
	check(inst1 ~= ref_inst1, "compareinstances: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (==) cloneref –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false", "compareinstances: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ cloneref –≤–µ—Ä–Ω—É–ª–æ true", true)

	inst1:Destroy(); inst2:Destroy()
end

local function test_file_operations()
	local path = "file_op_test.txt"
	if not present(writefile, "writefile") then warnEmoji("writefile –Ω–µ –Ω–∞–π–¥–µ–Ω"); return end
	if not present(appendfile, "appendfile") then warnEmoji("appendfile –Ω–µ –Ω–∞–π–¥–µ–Ω"); return end
	if not present(readfile, "readfile") then warnEmoji("readfile –Ω–µ –Ω–∞–π–¥–µ–Ω"); return end
	if isfile and isfile(path) and delfile then delfile(path) end

	local ok_write = select(1, safe_pcall(writefile, path, "line1"))
	if check(ok_write, "writefile: —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–æ–∫", "writefile: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏", false) then
		check(readfile(path) == "line1", "writefile: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "writefile: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", false)
	end

	local ok_append = select(1, safe_pcall(appendfile, path, "\nline2"))
	if check(ok_append, "appendfile: –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–æ–∫", "appendfile: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", false) then
		check(readfile(path) == "line1\nline2", "appendfile: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", "appendfile: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", false)
	end

	writefile(path, "overwrite")
	check(readfile(path) == "overwrite", "writefile: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª", "writefile: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω", false)

	if present(delfile, "delfile") then delfile(path) end
end

local function test_folder_and_load_ops()
    local fns = {makefolder, isfolder, listfiles, loadfile, writefile}
    local fns_names = {"makefolder", "isfolder", "listfiles", "loadfile", "writefile"}
    for i = 1, #fns do
        if not present(fns[i], fns_names[i]) then return end
    end

    local folder = "luau_test_folder"
    local file_in_root = "luau_test_file.lua"
    local file_in_folder = folder .. "/" .. "inner_file.txt"

    if present(delfile, "delfile") then
        safe_pcall(delfile, file_in_root)
        safe_pcall(delfile, file_in_folder)
    end
    if present(delfolder, "delfolder") then
        safe_pcall(delfolder, folder)
    end
    task.wait(0.05)

    makefolder(folder)
    check(isfolder(folder), "isfolder: true –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π —á–µ—Ä–µ–∑ makefolder –ø–∞–ø–∫–∏", "isfolder: false –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏", false)

    writefile(file_in_root, "return ...+1")
    check(not isfolder(file_in_root), "isfolder: false –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", "isfolder: true –¥–ª—è —Ñ–∞–π–ª–∞", true)
    writefile(file_in_folder, "test_content")

    local ok_list, root_files = safe_pcall(listfiles, "")
    if check(ok_list and type(root_files) == "table", "listfiles(''): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "listfiles(''): –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", false) then
        local found = false
        for _, v in ipairs(root_files) do
            if v:match(folder) then
                found = true
                break
            end
        end
        check(found, "listfiles(''): –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É", "listfiles(''): –Ω–µ –Ω–∞—à–µ–ª –ø–∞–ø–∫—É", false)
    end

    local ok_list2, folder_files = safe_pcall(listfiles, folder)
    if check(ok_list2 and type(folder_files) == "table", "listfiles(folder): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "listfiles(folder): –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", false) then
        local found = false
        for _, v in ipairs(folder_files) do
            local name = v:match("[^/\\]+$")
            if name == "inner_file.txt" then
                found = true
                break
            end
        end
        check(found, "listfiles(folder): –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏", "listfiles(folder): –Ω–µ –Ω–∞—à–µ–ª —Ñ–∞–π–ª", false)
    end

    local ok_load, chunk = safe_pcall(loadfile, file_in_root)
    if check(ok_load and type(chunk) == "function", "loadfile: –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ —Ñ—É–Ω–∫—Ü–∏—é", "loadfile: –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª —Ñ–∞–π–ª", true) then
        local ok_exec, res = safe_pcall(chunk, 10)
        check(ok_exec and res == 11, "loadfile: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "loadfile: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", true)
    end

    writefile(file_in_root, "invalid-syntax")
    local ok_load_err, chunk_err = safe_pcall(loadfile, file_in_root)
    local syntax_error_detected = false
    if not ok_load_err then
        syntax_error_detected = true
    elseif type(chunk_err) == "function" then
        local ok_exec_err = pcall(chunk_err)
        if not ok_exec_err then
            syntax_error_detected = true
        end
    elseif type(chunk_err) == "string" and chunk_err:lower():find("syntax") then
        syntax_error_detected = true
    end
    check(syntax_error_detected, "loadfile: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É", "loadfile: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ", true)

    if present(delfolder, "delfolder") then
        local ok_del = select(1, safe_pcall(delfolder, folder))
        if check(ok_del, "delfolder: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "delfolder: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", false) then
            check(not isfolder(folder), "delfolder: —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É", "delfolder: –ø–∞–ø–∫–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞", false)
        end
    end

    if present(delfile, "delfile") then
        delfile(file_in_root)
    end
end

local function test_setscriptable()
	if not present(setscriptable, "setscriptable") then return end
	local part = Instance.new("Part")
	local prop = "Size"


    local ok_before = not select(1, safe_pcall(function() return part[prop] end))
	check(ok_before, "setscriptable: —Å–≤–æ–π—Å—Ç–≤–æ '"..prop.."' –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Å–∫—Ä–∏–ø—Ç—É–µ–º–æ (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å)", "setscriptable: —Å–≤–æ–π—Å—Ç–≤–æ '"..prop.."' –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç—É–µ–º–æ", true)

	local ok_set_true = select(1, safe_pcall(setscriptable, part, prop, true))
	if check(ok_set_true, "setscriptable(true): –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "setscriptable(true): –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", true) then
		local p, val = safe_pcall(function() return part[prop] end)
		check(p and typeof(val) == "Vector3", "setscriptable(true): —Å–≤–æ–π—Å—Ç–≤–æ '"..prop.."' —Å—Ç–∞–ª–æ —á–∏—Ç–∞–µ–º—ã–º", "setscriptable(true): —Å–≤–æ–π—Å—Ç–≤–æ '"..prop.."' –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è", true)
	end

	local ok_set_false = select(1, safe_pcall(setscriptable, part, prop, false))
	if check(ok_set_false, "setscriptable(false): –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "setscriptable(false): –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", true) then
		local ok_after = not select(1, safe_pcall(function() return part[prop] end))
		check(ok_after, "setscriptable(false): —Å–≤–æ–π—Å—Ç–≤–æ '"..prop.."' —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–æ –Ω–µ—Å–∫—Ä–∏–ø—Ç—É–µ–º—ã–º", "setscriptable(false): —Å–≤–æ–π—Å—Ç–≤–æ '"..prop.."' –æ—Å—Ç–∞–ª–æ—Å—å —Å–∫—Ä–∏–ø—Ç—É–µ–º—ã–º", true)
	end

	part:Destroy()

end

local function test_debug_setstack()
	if not present(debug.setstack, "debug.setstack") then return end

	local outer_success = false
	local function outer_wrapper()
		local outer_val = 1 
		local function inner()
			local success, err = safe_pcall(debug.setstack, 2, 1, 2)
			if success and outer_val == 2 then
				outer_success = true
			end
		end
		inner()
	end
	outer_wrapper()
	check(outer_success, "debug.setstack(2, ...): —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç local –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Å–∫–æ—É–ø–µ", "debug.setstack: –Ω–µ –∏–∑–º–µ–Ω–∏–ª local –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ", true)

	local function inner_wrapper()
		local inner_val = 10 
		safe_pcall(debug.setstack, 1, 1, 20)
		return inner_val == 20
	end
	check(inner_wrapper(), "debug.setstack(1, ...): —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç local –≤ —Ç–µ–∫—É—â–µ–º —Å–∫–æ—É–ø–µ", "debug.setstack: –Ω–µ –∏–∑–º–µ–Ω–∏–ª local", true)

	local function type_mismatch_test()
		local a_number = 5
		local ok_err = not select(1, safe_pcall(debug.setstack, 1, 1, "a string"))
		check(ok_err, "debug.setstack: –æ–∂–∏–¥–∞–µ–º–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤", "debug.setstack: –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤", true)
	end
	type_mismatch_test()

	local ok_err_c = not select(1, safe_pcall(function() pcall(debug.setstack, 1, 1, 0) end))
	check(ok_err_c, "debug.setstack: –æ–∂–∏–¥–∞–µ–º–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ C-–∑–∞–º—ã–∫–∞–Ω–∏–∏", "debug.setstack: –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É –Ω–∞ C-–∑–∞–º—ã–∫–∞–Ω–∏–∏", true)
end

local function test_replicatesignal()
    if not present or not present(replicatesignal, "replicatesignal") then
        return
    end

    local Players = cloneref and cloneref(game:GetService("Players")) or game:GetService("Players")
    local LocalPlayer = cloneref and cloneref(Players.LocalPlayer) or Players.LocalPlayer
    if not LocalPlayer then
        warnEmoji("replicatesignal: LocalPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        return
    end

    if not LocalPlayer:FindFirstChild("PlayerGui") then
        warnEmoji("replicatesignal: PlayerGui –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = "ReplicateSignalTestGui"
    gui.ResetOnSpawn = false
    gui.Parent = LocalPlayer.PlayerGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 100, 0, 100)
    frame.Position = UDim2.new(0.5, -50, 0.5, -50)
    frame.Parent = gui

    local signal = frame.MouseWheelForward
    task.wait(0.1)

    local ok_good = select(1, safe_pcall(replicatesignal, signal, 121, 214))
    check(ok_good, "replicatesignal: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "replicatesignal: –æ—à–∏–±–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", false)

    task.wait(0.1)

    local ok_bad1 = not select(1, safe_pcall(replicatesignal, signal))
    check(ok_bad1, "replicatesignal: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", "replicatesignal: –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", false)

    task.wait(0.1)

    local ok_bad2 = not select(1, safe_pcall(replicatesignal, signal, 121))
    check(ok_bad2, "replicatesignal: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö", "replicatesignal: –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö", false)

    task.wait(0.1)

    gui:Destroy()
end

local function test_getfunctionhash()
	if not present(getfunctionhash, "getfunctionhash") then return end

	local is_sha384_hex = function(h) return type(h) == "string" and #h == 96 and h:match("^[0-9a-fA-F]+$") ~= nil end
	local f1 = function() return 1 end
	local f2 = function() return 2 end
	local f3 = function() return 1 end
	local f4 = function() return "const" end

	local ok1, h1 = safe_pcall(getfunctionhash, f1)
	check(ok1 and is_sha384_hex(h1), "getfunctionhash: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π SHA384 —Ö—ç—à", "getfunctionhash: –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π —Ö—ç—à", true)
	check(getfunctionhash(f1) ~= getfunctionhash(f2), "getfunctionhash: —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ö—ç—à–∏", "getfunctionhash: —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ö—ç—à–∏", true)
	check(getfunctionhash(f1) == getfunctionhash(f3), "getfunctionhash: –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ö—ç—à–∏", "getfunctionhash: –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ö—ç—à–∏", true)
	check(getfunctionhash(f1) ~= getfunctionhash(f4), "getfunctionhash: —Ö—ç—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç", "getfunctionhash: —Ö—ç—à –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç", true)

	local ok_err, _ = safe_pcall(getfunctionhash, print)
	check(not ok_err, "getfunctionhash: –æ–∂–∏–¥–∞–µ–º–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "getfunctionhash: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
end

local function test_crypto_ops()
	if not present(crypt, "crypt") then return end
	if not present(crypt.base64encode, "crypt.base64encode") or not present(crypt.base64decode, "crypt.base64decode") then return end
	
	local orig_str = "Test string with special chars\0\1\2\255!"
	local encoded_known = "RHVtbXlTdHJpbmcAAg=="
	local decoded_known = "DummyString\0\2"

	local ok_enc, encoded = safe_pcall(crypt.base64encode, orig_str)
	if check(ok_enc and type(encoded) == "string", "crypt.base64encode: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "crypt.base64encode: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏", true) then
		local ok_dec, decoded = safe_pcall(crypt.base64decode, encoded)
		check(ok_dec and decoded == orig_str, "crypt.base64decode: round-trip (–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ) —É—Å–ø–µ—à–µ–Ω", "crypt.base64decode: round-trip –Ω–µ —É–¥–∞–ª—Å—è", true)
	end

	local ok_enc_known = crypt.base64encode(decoded_known) == encoded_known
	check(ok_enc_known, "crypt.base64encode: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É", "crypt.base64encode: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", true)

	local ok_dec_known, decoded_res = safe_pcall(crypt.base64decode, encoded_known)
	check(ok_dec_known and decoded_res == decoded_known, "crypt.base64decode: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É", "crypt.base64decode: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", true)
end

local function test_drawing()
    if not present(Drawing, "Drawing") or not present(Drawing.new, "Drawing.new") or not present(isrenderobj, "isrenderobj") then
        return
    end

    local function safe_new(t)
        local ok, obj = safe_pcall(function()
            return Drawing.new(t)
        end)
        return ok, obj
    end

    local ok_circle, circle = safe_new("Circle")
    if ok_circle and isrenderobj(circle) then
        check(true, "Drawing.new: –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è", "", true)
        pcall(function() circle:Destroy() end)
        circle = nil
    else
        check(false, "Drawing.new: –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è", "Drawing.new: –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", true)
    end
end

local function test_getcallingscript()
	if not present(getcallingscript, "getcallingscript") then return end

	local from_c_ok, c_caller = safe_pcall(getcallingscript)
	check(from_c_ok and c_caller == nil, "getcallingscript: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ C-–ø–æ—Ç–æ–∫–∞", "getcallingscript: –Ω–µ –≤–µ—Ä–Ω—É–ª nil –∏–∑ C-–ø–æ—Ç–æ–∫–∞", false)

	local function from_lua()
		return getcallingscript()
	end
	local from_lua_ok, lua_caller = safe_pcall(from_lua)
	check(from_lua_ok and lua_caller == script, "getcallingscript: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ Luau", "getcallingscript: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç", false)
end

local function test_getloadedmodules()
    if not present(getloadedmodules, "getloadedmodules") then return end

    local loaded_mod = nil
    local list_before = getloadedmodules()
    if type(list_before) == "table" and #list_before > 0 then
        loaded_mod = list_before[1]
    end
    if not loaded_mod then
        return check(false, "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞", "", false)
    end

    local not_loaded_mod = Instance.new("ModuleScript")
    not_loaded_mod.Name = "NotLoaded_" .. tostring(math.random(1, 1e9))

    local ok_get, modules = safe_pcall(getloadedmodules)
    if check(ok_get and type(modules) == "table", "getloadedmodules: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getloadedmodules: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", false) then
        local found_loaded, found_not_loaded = false, false
        for _, mod in ipairs(modules) do
            if mod == loaded_mod then
                found_loaded = true
            elseif mod == not_loaded_mod then
                found_not_loaded = true
            end
        end
        check(found_loaded, "getloadedmodules: –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å", "getloadedmodules: –Ω–µ –Ω–∞—à–µ–ª –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å", false)
        check(not found_not_loaded, "getloadedmodules: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏", "getloadedmodules: –æ—à–∏–±–æ—á–Ω–æ –≤–∫–ª—é—á–∏–ª –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å", false)
    end

    not_loaded_mod:Destroy()
end

local function test_getscriptclosure()
	if not present(getscriptclosure, "getscriptclosure") then return end
	
	local script_with_code = Instance.new("LocalScript")
	script_with_code.Source = "return 'hello', 123"
	
	local script_empty = Instance.new("LocalScript")
	
	local ok_get, closure = safe_pcall(getscriptclosure, script_with_code)
	if check(ok_get and type(closure) == "function", "getscriptclosure: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ —Å –∫–æ–¥–æ–º", "getscriptclosure: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ—É–Ω–∫—Ü–∏—é", false) then
		local ok_run, s, n = safe_pcall(closure)
		check(ok_run and s == "hello" and n == 123, "getscriptclosure: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "getscriptclosure: —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", false)
	end

	local ok_nil, res_nil = safe_pcall(getscriptclosure, script_empty)
	check(ok_nil and res_nil == nil, "getscriptclosure: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ –±–∞–π—Ç–∫–æ–¥–∞", "getscriptclosure: –Ω–µ –≤–µ—Ä–Ω—É–ª nil", false)

	script_with_code:Destroy(); script_empty:Destroy()
end

local function test_getscripthash()
    if not present(getscripthash, "getscripthash") then
        return
    end

    local function is_sha384_hex(h)
        return type(h) == "string"
            and #h == 96
            and h:match("^[0-9a-fA-F]+$") ~= nil
    end

    local function make_script(src)
        local s = Instance.new("ModuleScript")
        if src ~= nil then
            s.Source = src
        end
        s.Parent = game:GetService("CoreGui")
        return s
    end

    local function safe_hash(obj)
        local t0 = os.clock()
        local ok, res
        repeat
            ok, res = safe_pcall(getscripthash, obj)
            if ok and (res == nil or is_sha384_hex(res)) then
                break
            end
            task.wait(0.03)
        until os.clock() - t0 > 3
        return ok, res
    end

    local s1 = make_script("return 1")
    local s2 = make_script("return 2")
    local s3 = make_script("return 1")
    local s_empty = make_script()

    local ok_h1, h1 = safe_hash(s1)
    check(ok_h1 and is_sha384_hex(h1),
        "getscripthash: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π SHA384 —Ö—ç—à",
        "getscripthash: –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö—ç—à", false)

    local ok_h2, h2 = safe_hash(s2)
    check(ok_h2 and is_sha384_hex(h2) and h1 ~= h2,
        "getscripthash: —Ö—ç—à–∏ —Ä–∞–∑–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è",
        "getscripthash: —Ö—ç—à–∏ —Ä–∞–∑–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç", false)

    local ok_h3, h3 = safe_hash(s3)
    check(ok_h3 and is_sha384_hex(h3) and h1 == h3,
        "getscripthash: —Ö—ç—à–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
        "getscripthash: —Ö—ç—à–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è", false)

    local ok_nil, res_nil = safe_hash(s_empty)
    check(ok_nil and res_nil == nil,
        "getscripthash: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ –±–∞–π—Ç–∫–æ–¥–∞",
        "getscripthash: –Ω–µ –≤–µ—Ä–Ω—É–ª nil –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞", false)

    local bad_ok = pcall(function() getscripthash({}) end)
    check(not bad_ok,
        "getscripthash: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞",
        "getscripthash: –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞", false)

    local destroyed_script = make_script("return 'x'")
    destroyed_script:Destroy()
    local ok_destroyed, res_destroyed = safe_hash(destroyed_script)
    check(not ok_destroyed or res_destroyed == nil,
        "getscripthash: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç",
        "getscripthash: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç", false)

    s1:Destroy()
    s2:Destroy()
    s3:Destroy()
    s_empty:Destroy()
end

local function test_identifyexecutor()
	if not present(identifyexecutor, "identifyexecutor") then return end

	local ok_get, name, version = safe_pcall(identifyexecutor)
	if check(ok_get, "identifyexecutor: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "identifyexecutor: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", true) then
		check(type(name) == "string" and #name > 0, "identifyexecutor: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è (—Å—Ç—Ä–æ–∫–∞)", "identifyexecutor: –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–º—è", true)
		check(type(version) == "string" and #version > 0, "identifyexecutor: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—É—Å—Ç—É—é –≤–µ—Ä—Å–∏—é (—Å—Ç—Ä–æ–∫–∞)", "identifyexecutor: –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–µ—Ä—Å–∏—é", true)
	end
end

local function test_getinstances()
	if not present(getinstances, "getinstances") then return end

	local part = Instance.new("Part")
	part.Parent = nil
	local sentinel_name = "GetInstancesTest_"..math.random()
	part.Name = sentinel_name
	task.wait(0.05)

	local ok_get, instances = safe_pcall(getinstances)
	if check(ok_get and type(instances) == "table", "getinstances: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É", "getinstances: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", false) then
		local found = false
		for _, inst in ipairs(instances) do
			if inst == part and inst.Name == sentinel_name then
				found = true
				break
			end
		end
		check(found, "getinstances: –Ω–∞—Ö–æ–¥–∏—Ç nil-parented —ç–∫–∑–µ–º–ø–ª—è—Ä", "getinstances: –Ω–µ –Ω–∞—à–µ–ª —ç–∫–∑–µ–º–ø–ª—è—Ä", false)
	end
	part:Destroy()
end

local function test_fireproximityprompt()
	if not present(fireproximityprompt, "fireproximityprompt") then return end

	local part = Instance.new("Part", workspace)
	local prompt = Instance.new("ProximityPrompt", part)
	
	local triggered_by = nil
	local conn = prompt.Triggered:Connect(function(player)
		triggered_by = player
	end)
	task.wait(0.1)
	
	local ok_fire = select(1, safe_pcall(fireproximityprompt, prompt))
	check(ok_fire, "fireproximityprompt: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "fireproximityprompt: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", false)
	task.wait(0.1)

	local LocalPlayer = game:GetService("Players").LocalPlayer
	check(triggered_by == LocalPlayer, "fireproximityprompt: —Å–æ–±—ã—Ç–∏–µ Triggered —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å LocalPlayer", "fireproximityprompt: —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ", false)

	conn:Disconnect()
	part:Destroy()
end

local function test_fireclickdetector() 
    if not present(fireclickdetector, "fireclickdetector") then return end

    local G = cloneref and cloneref(game) or game
    local WS = G:GetService("Workspace")
    local Players = G:GetService("Players")
    local lp = Players.LocalPlayer

    local container = Instance.new("Folder")
    container.Name = "__cd_sandbox__"
    container.Archivable = false
    container.Parent = WS

    local part = Instance.new("Part")
    part.Name = "Part"
    part.Anchored = true
    part.CanCollide = false
    part.CanTouch = false
    part.Transparency = 1
    part.Parent = container

    pcall(function()
        part.CFrame = CFrame.new(0, 10000, 0)
    end)

    local cd = Instance.new("ClickDetector")
    cd.MaxActivationDistance = 512
    cd.Parent = part

    local m1_fired, m2_fired, hover_enter_fired, hover_leave_fired = false, false, false, false
    cd.MouseClick:Connect(function(player) if player == lp then m1_fired = true end end)
    cd.RightMouseClick:Connect(function(player) if player == lp then m2_fired = true end end)
    cd.MouseHoverEnter:Connect(function(player) if player == lp then hover_enter_fired = true end end)
    cd.MouseHoverLeave:Connect(function(player) if player == lp then hover_leave_fired = true end end)

    local function wait_flag(getter, timeout)
        local t0 = os.clock()
        timeout = timeout or 0.3
        while not getter() and os.clock() - t0 < timeout do
            task.wait()
        end
        return getter()
    end

    local ok_default = pcall(function() fireclickdetector(cd) end)
    check(ok_default and wait_flag(function() return m1_fired end),
        "fireclickdetector: –≤—ã–∑—ã–≤–∞–µ—Ç MouseClick –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "fireclickdetector: –Ω–µ –≤—ã–∑–≤–∞–ª MouseClick", false)

    local ok_right = pcall(function() fireclickdetector(cd, 0, "RightMouseClick") end)
    check(ok_right and wait_flag(function() return m2_fired end),
        "fireclickdetector: –≤—ã–∑—ã–≤–∞–µ—Ç RightMouseClick –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏",
        "fireclickdetector: –Ω–µ –≤—ã–∑–≤–∞–ª RightMouseClick", false)

    local ok_hover_enter = pcall(function() fireclickdetector(cd, 0, "MouseHoverEnter") end)
    check(ok_hover_enter and wait_flag(function() return hover_enter_fired end),
        "fireclickdetector: –≤—ã–∑—ã–≤–∞–µ—Ç MouseHoverEnter",
        "fireclickdetector: –Ω–µ –≤—ã–∑–≤–∞–ª MouseHoverEnter", false)

    local ok_hover_leave = pcall(function() fireclickdetector(cd, 0, "MouseHoverLeave") end)
    check(ok_hover_leave and wait_flag(function() return hover_leave_fired end),
        "fireclickdetector: –≤—ã–∑—ã–≤–∞–µ—Ç MouseHoverLeave",
        "fireclickdetector: –Ω–µ –≤—ã–∑–≤–∞–ª MouseHoverLeave", false)

    container:Destroy()
end

local function test_fpscap()
	if not present(getfpscap, "getfpscap") or not present(setfpscap, "setfpscap") then return end

	local ok_get, original_cap = safe_pcall(getfpscap)
	if not check(ok_get and type(original_cap) == "number", "getfpscap: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ", "getfpscap: –Ω–µ –≤–µ—Ä–Ω—É–ª —á–∏—Å–ª–æ –∏–ª–∏ –æ—à–∏–±–∫–∞", false) then return end
	
	local new_cap = 144
	if original_cap == new_cap then new_cap = 120 end
	
	local ok_set = select(1, safe_pcall(setfpscap, new_cap))
	if check(ok_set, "setfpscap: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "setfpscap: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", false) then
		local ok_get_new, current_cap = safe_pcall(getfpscap)
		check(ok_get_new and current_cap == new_cap, "setfpscap: —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—ã–π FPS cap", "setfpscap: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FPS cap", false)
	end
	
	setfpscap(original_cap)
	check(getfpscap() == original_cap, "setfpscap: —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –∏—Å—Ö–æ–¥–Ω—ã–π FPS cap", "setfpscap: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FPS cap", false)
end

local function test_replaceclosure()  -- –ë–ª—è—Ç—å —ç—Ç–æ –ø–∏–∑–µ–¥—Ü –∫–∞–∫–æ–π - —Ç–æ –∑–∞—á–µ–º —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç
    local harmless_func = function()
        return "safe"
    end

    if not present(replaceclosure, "replaceclosure") then return end

    local upvalue = 1
    local original_func = function()
        upvalue = upvalue + 1
        return "original"
    end

    local new_func = function()
        return "replaced", upvalue
    end

    local ok_replace = select(1, safe_pcall(replaceclosure, harmless_func, new_func))
    if not check(ok_replace, "replaceclosure: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "replaceclosure: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", true) then return end

    local res_after_replace, upvalue_seen = new_func()
    check(res_after_replace == "replaced", "replaceclosure: –≤—ã–∑–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é", "replaceclosure: –∑–∞–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å", true)
    check(upvalue_seen == 1, "replaceclosure: –∑–∞–º–µ–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∏–¥–∏—Ç upvalue –æ—Ä–∏–≥–∏–Ω–∞–ª–∞", "replaceclosure: –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ upvalue", true)

    local ok_err_c = not select(1, safe_pcall(replaceclosure, math.sin, function() end)) -- –Ø —Ç—É—Ç —Å—Ç—Ä–∞–¥–∞–ª –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–≥–æ–≤ –∏ –ø—Ä–∏–∫–æ–ª—é—Ö —Å —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    check(ok_err_c, "replaceclosure: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–º–µ–Ω–∏—Ç—å C-—Ñ—É–Ω–∫—Ü–∏—é", "replaceclosure: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –¥–ª—è C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
end

local function test_isrbxactive()
	if not present(isrbxactive, "isrbxactive") then return end

	local ok_get, status = safe_pcall(isrbxactive)
	check(ok_get and type(status) == "boolean" and status, "isrbxactive: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ", "isrbxactive: –Ω–µ –≤–µ—Ä–Ω—É–ª true –∏–ª–∏ –æ—à–∏–±–∫–∞", false)
end

local function test_isscriptable()
	if not present(isscriptable, "isscriptable") or not present(setscriptable, "setscriptable") then return end

	local part = Instance.new("Part")
	local prop = "Size"
	
	check(not isscriptable(part, prop), "isscriptable: false –¥–ª—è –Ω–µ—Å–∫—Ä–∏–ø—Ç—É–µ–º–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–æ–π—Å—Ç–≤–∞", "isscriptable: true –¥–ª—è –Ω–µ—Å–∫—Ä–∏–ø—Ç—É–µ–º–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞", true)
	
	setscriptable(part, prop, true)
	check(isscriptable(part, prop), "isscriptable: true –ø–æ—Å–ª–µ setscriptable(true)", "isscriptable: false –ø–æ—Å–ª–µ setscriptable(true)", true)
	
	setscriptable(part, prop, false)
	check(not isscriptable(part, prop), "isscriptable: false –ø–æ—Å–ª–µ setscriptable(false)", "isscriptable: true –ø–æ—Å–ª–µ setscriptable(false)", true)

	part:Destroy()
end

local function test_newlclosure() -- –°—É–∫–∞ —è –¥—É–º–∞–ª –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
	if not present(newlclosure, "newlclosure") then return end
	
	local up = { count = 0 }
	local original = function() up.count = up.count + 1 end
	
	local ok_new, lclosure = safe_pcall(newlclosure, original)
	if check(ok_new and islclosure(lclosure), "newlclosure: —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–µ—Ç lclosure", "newlclosure: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lclosure", true) then
		original()
		lclosure()
		check(up.count == 2, "newlclosure: —Ä–∞–∑–¥–µ–ª—è–µ—Ç upvalues —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º", "newlclosure: –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç upvalues", true)
	end
	
	local ok_err = not select(1, safe_pcall(newlclosure, print)) -- –ü–æ—á–µ–º—É –Ω–∞ Lua –µ–±–∞—à—É [C] –ø—Ä–æ–≤–µ—Ä–∫—É? –ù–µ –∑–Ω–∞—é
	check(ok_err, "newlclosure: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "newlclosure: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –¥–ª—è C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
end

local function test_debug_setmetatable()
	local d_smt = debug.setmetatable -- –î–µ–±–∞–≥ –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü–∞!!!
	if not present(d_smt, "debug.setmetatable") then return end

	local target_table = {}
	local protected_mt = { __metatable = "LOCKED" }
	setmetatable(target_table, protected_mt)
	
	local ok_vanilla = not select(1, safe_pcall(setmetatable, target_table, {}))
	check(ok_vanilla, "debug.setmetatable: __metatable –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å", "debug.setmetatable: __metatable –∑–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞", true)
	
	local new_mt = { __index = function() return "bypassed_by_debug" end }
	local ok_set, _ = safe_pcall(d_smt, target_table, new_mt)
	
	if check(ok_set, "debug.setmetatable: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ —Å –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ú–¢", "debug.setmetatable: –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É", true) then
		check(getmetatable(target_table) == new_mt and target_table.xyz == "bypassed_by_debug", "debug.setmetatable: —É—Å–ø–µ—à–Ω–æ –æ–±–æ—à–µ–ª __metatable", "debug.setmetatable: –Ω–µ —Å–º–æ–≥ –æ–±–æ–π—Ç–∏ __metatable", true)
	end
end

local function test_debug_more()
    if not present(debug, "debug") then return end
    
    if present(debug.setconstant, "debug.setconstant") then
        local function dummy_func()
            return "original_string", 123
        end

        local original_string_const_index, number_const_index
        if present(debug.getconstants, "debug.getconstants") then
            local consts = debug.getconstants(dummy_func)
            for i, v in ipairs(consts) do
                if v == "original_string" then original_string_const_index = i end
                if v == 123 then number_const_index = i end
            end
        end

        if original_string_const_index then
            local ok_set, _ = safe_pcall(debug.setconstant, dummy_func, original_string_const_index, "new_string")
            if check(ok_set, "debug.setconstant: –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "debug.setconstant: –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É", true) then
                local s, n = dummy_func()
                check(s == "new_string" and n == 123, "debug.setconstant: —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É", "debug.setconstant: –Ω–µ –∏–∑–º–µ–Ω–∏–ª –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É", true)
            end
        else
            warnEmoji("debug.setconstant: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, —Ç–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω—ã–π")
        end
        local ok_err_c = not select(1, safe_pcall(debug.setconstant, print, 1, "test"))
        check(ok_err_c, "debug.setconstant: –æ—à–∏–±–∫–∞ –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "debug.setconstant: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
    end
    
    if present(debug.getstack, "debug.getstack") then
        local var_outer = "outer_val"
        local function outer_func()
            local var_inner = {key = "inner_val"}
            local function most_inner_func()
                local stack_l2_ok, stack_l2_val = safe_pcall(debug.getstack, 2, 2)
                check(stack_l2_ok and stack_l2_val == var_inner, "debug.getstack(level, index): –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞", "debug.getstack(level, index): –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è", true)
                local stack_l1_ok, stack_l1_table = safe_pcall(debug.getstack, 1)
                check(stack_l1_ok and type(stack_l1_table) == "table" and #stack_l1_table > 0, "debug.getstack(level): –ø–æ–ª—É—á–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", "debug.getstack(level): –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true)
            end
            most_inner_func()
        end
        outer_func()
        local ok_err_c = not select(1, safe_pcall(debug.getstack, 0))
        check(ok_err_c, "debug.getstack: –æ—à–∏–±–∫–∞ –ø—Ä–∏ level=0 (C-—Ñ—É–Ω–∫—Ü–∏—è)", "debug.getstack: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—Ä–µ–π–º–µ", true)
    end
    
    if present(debug.getprotos, "debug.getprotos") then
        local function container()
            local function proto1() end
            local function proto2() end
        end
        local ok_get, protos = safe_pcall(debug.getprotos, container)
        if check(ok_get and type(protos) == "table" and #protos == 2, "debug.getprotos: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤", "debug.getprotos: –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∞–±–ª–∏—Ü—É", true) then
            local info1, info2 = debug.getinfo(protos[1], "n"), debug.getinfo(protos[2], "n")
            local names_ok = (info1.name == "proto1" and info2.name == "proto2") or (info1.name == "proto2" and info2.name == "proto1")
            check(names_ok, "debug.getprotos: –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", "debug.getprotos: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã", true)
        end
        local ok_err_c = not select(1, safe_pcall(debug.getprotos, print))
        check(ok_err_c, "debug.getprotos: –æ—à–∏–±–∫–∞ –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", "debug.getprotos: –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –Ω–∞ C-—Ñ—É–Ω–∫—Ü–∏–∏", true)
    end
end

local function test_hui()
    if not present(gethui, "gethui") then return end
    
    local ok_get, hui = safe_pcall(gethui)
    if not check(ok_get and (typeof(hui) == "Instance" or typeof(hui) == "BasePlayerGui" or typeof(hui) == "Folder"), "gethui: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Instance", "gethui: –Ω–µ –≤–µ—Ä–Ω—É–ª Instance", false) then
        return
    end

    local gui = Instance.new("ScreenGui")
    local gui_name = "HUITEST_" .. tostring(math.random(1e9))
    gui.Name = gui_name
    gui.Parent = hui

    task.wait(0.05)
    
    check(gui.Parent == hui and hui:FindFirstChild(gui_name) == gui, "gethui: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è UI", "gethui: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç", false)
    gui:Destroy()
end

local function test_mouse_emulation()
    local mouse_funcs = {mouse1click, mouse1press, mouse1release, mouse2click, mouse2press, mouse2release, mousemoveabs, mousemoverel, mousescroll}
    local mouse_func_names = {"mouse1click", "mouse1press", "mouse1release", "mouse2click", "mouse2press", "mouse2release", "mousemoveabs", "mousemoverel", "mousescroll"}

    local all_present = true
    for i, f in ipairs(mouse_funcs) do
        if not present(f, mouse_func_names[i]) then
            all_present = false
        end
    end
    if not all_present then return end
    
    local ok_click = select(1, safe_pcall(mouse1click))
    check(ok_click, "mouse1click: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "mouse1click: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    
    local ok_press = select(1, safe_pcall(mouse1press))
    check(ok_press, "mouse1press: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "mouse1press: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)

    local ok_release = select(1, safe_pcall(mouse1release))
    check(ok_release, "mouse1release: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "mouse1release: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    
    local ok_moveabs = select(1, safe_pcall(mousemoveabs, 100, 100))
    check(ok_moveabs, "mousemoveabs: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", "mousemoveabs: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    
    local ok_moverel = select(1, safe_pcall(mousemoverel, 10, 10))
    check(ok_moverel, "mousemoverel: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", "mousemoverel: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    
    local ok_scroll = select(1, safe_pcall(mousescroll, 0, 10))
    check(ok_scroll, "mousescroll: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", "mousescroll: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
end

local function test_cache()
    if not present(cache, "cache") then return end
    
    local funcs = {cache.invalidate, cache.iscached, cache.replace}
    local names = {"cache.invalidate", "cache.iscached", "cache.replace"}
    
    for i=1, #funcs do if not present(funcs[i], names[i]) then return end end

    local test_url = "https://thisisafakeurlfortestingpurposes.xyz/resource.dat"
    
    local ok_is, is_cached_before = safe_pcall(cache.iscached, test_url)
    check(ok_is and not is_cached_before, "cache.iscached: false –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞", "cache.iscached: true –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞", false)
    
    local ok_invalidate = select(1, safe_pcall(cache.invalidate, test_url))
    check(ok_invalidate, "cache.invalidate: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "cache.invalidate: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", false)

    local new_content = "replaced_content"
    local ok_replace = select(1, safe_pcall(cache.replace, test_url, new_content))
    check(ok_replace, "cache.replace: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "cache.replace: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", false)

end

local function test_compression()
    if not present(lz4compress, "lz4compress") or not present(lz4decompress, "lz4decompress") then return end

    local original_string = "this string is a test for lz4 compression, it needs to be long enough to be compressible"
    
    local ok_compress, compressed = safe_pcall(lz4compress, original_string)
    if check(ok_compress and type(compressed) == "string", "lz4compress: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É", "lz4compress: –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø", true) then
        local ok_decompress, decompressed = safe_pcall(lz4decompress, compressed)
        if check(ok_decompress and type(decompressed) == "string", "lz4decompress: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É", "lz4decompress: –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø", true) then
            check(decompressed == original_string, "lz4: round-trip (—Å–∂–∞—Ç–∏–µ-—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞) —É—Å–ø–µ—à–µ–Ω", "lz4: round-trip –Ω–µ —É–¥–∞–ª—Å—è", true)
        end
    end
end

local function test_crypto_extended()
	if not present(crypt, "crypt") then return end
    local funcs = {crypt.encrypt, crypt.decrypt, crypt.generatebytes, crypt.generatekey, crypt.hash}
    local names = {"crypt.encrypt", "crypt.decrypt", "crypt.generatebytes", "crypt.generatekey", "crypt.hash"}
    for i=1, #funcs do if not present(funcs[i], names[i]) then return end end
    
    local plaintext = "some plaintext data to be encrypted"
    local ok_key, key = safe_pcall(crypt.generatekey)
    
    if check(ok_key and type(key) == "string" and #key > 0, "crypt.generatekey: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É-–∫–ª—é—á", "crypt.generatekey: –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–ª—é—á", true) then
        local ok_enc, ciphertext = safe_pcall(crypt.encrypt, plaintext, key, "some_additional_data")
        if check(ok_enc and type(ciphertext) == "string", "crypt.encrypt: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "crypt.encrypt: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏", true) then
            local ok_dec, decrypted = safe_pcall(crypt.decrypt, ciphertext, key, "some_additional_data")
            check(ok_dec and decrypted == plaintext, "crypt.decrypt: round-trip (—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ-–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ) —É—Å–ø–µ—à–µ–Ω", "crypt.decrypt: round-trip –Ω–µ —É–¥–∞–ª—Å—è", true)

            local wrong_key = crypt.generatekey()
            local ok_dec_wrong, decrypted_wrong = safe_pcall(crypt.decrypt, ciphertext, wrong_key, "some_additional_data")
            check(ok_dec_wrong and decrypted_wrong ~= plaintext, "crypt.decrypt: –Ω–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–ª—é—á–æ–º", "crypt.decrypt: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–ª—é—á–æ–º", true)
        end
    end

    local ok_bytes, bytes = safe_pcall(crypt.generatebytes, 16)
    check(ok_bytes and type(bytes) == "string" and #bytes == 16, "crypt.generatebytes: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã", "crypt.generatebytes: –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å—Ç—Ä–æ–∫—É", true)

    local data_to_hash = "some_data"
    local ok_hash, hash1 = safe_pcall(crypt.hash, data_to_hash, "sha384")
    check(ok_hash and type(hash1) == "string", "crypt.hash: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ö—ç—à–∞", "crypt.hash: –æ—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", true)
    local hash2 = crypt.hash(data_to_hash, "sha384")
    check(hash1 == hash2, "crypt.hash: —Ö—ç—à–∏ –¥–ª—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç", "crypt.hash: —Ö—ç—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", true)
end

local function test_misc_env()
    if present(messagebox, "messagebox") then
        local ok_msg = select(1, safe_pcall(messagebox, "test", "test", 0))
        check(ok_msg, "messagebox: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "messagebox: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    end
    
    if present(queue_on_teleport, "queue_on_teleport") then
        local code = "print('teleported!')"
        local ok_queue = select(1, safe_pcall(queue_on_teleport, code))
        check(ok_queue, "queue_on_teleport: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "queue_on_teleport: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    end

    if present(setclipboard, "setclipboard") then
        local text = "clipboard_test"
        local ok_set = select(1, safe_pcall(setclipboard, text))
        check(ok_set, "setclipboard: –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫", "setclipboard: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ", false)
    end
end


info("--- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---")
test_newcclosure()
test_hookfunction()
test_restorefunction()
test_getrawmetatable()
test_setrawmetatable()
test_readonly()
test_hookmetamethod()
test_getgc()
test_cloneref()
test_firetouchinterest()
test_firesignal()
test_compareinstances()
test_identifyexecutor()
test_isrbxactive()
test_fpscap()
test_hui()

info("--- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ Closure ---")
test_closure_checks()
test_replaceclosure()
test_newlclosure()

info("--- –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ üíÄüíÄüíÄ ---")
test_checkcaller()
test_getconnections()
test_getnilinstances()
test_threadidentity()
test_getscripts()
test_getrunningscripts()
test_getscriptbytecode()
test_setscriptable()
test_isscriptable()
test_getgenv()
test_getcallbackvalue()
test_getcallingscript()
test_getloadedmodules()
test_getscriptclosure()
test_getscripthash()
test_getfunctionhash()
test_getinstances()
test_fireproximityprompt()
test_fireclickdetector()

info("--- –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ç–µ–≤—ã–µ (aka request –∏ —Ç–¥.) ---")
test_request()
test_file_operations()
test_folder_and_load_ops()
test_getcustomasset()
test_replicatesignal()
test_cache()
test_misc_env()
test_mouse_emulation()

info("--- –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è ---")
test_crypto_ops()
test_crypto_extended()
test_compression()

info("--- 2D –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ ---")
test_drawing()

info("--- –ï–±—É—á–∏–π –ª–æ–∞–¥—Å—Ç—Ä–∏–Ω–≥ ---")
test_loadstring()

info("--- –¢–µ—Å—Ç—ã –¥–ª—è debug ---")
test_debug_info()
test_debug_upvalues()
test_debug_constants()
test_debug_setstack()
test_debug_setmetatable()
test_clonefunction()
test_debug_protos()
test_getreg()
test_debug_more()

local percent = totalTests > 0 and math.floor((passedTests / totalTests) * 100) or 0
local skidRate = totalTests > 0 and math.floor((skidCount / totalTests) * 100) or 0
info("–ò—Ç–æ–≥–æ: "..passedTests.."/"..totalTests.." ("..percent.."%)")
info("Skid Rate: "..skidCount.."/"..totalTests.." ("..skidRate.."%)")
